import streamlit as st
import PyPDF2
import requests
import json
from io import BytesIO

# --- Configura√ß√£o da P√°gina ---
st.set_page_config(
    page_title="Analisador de Artigos com Escala PEDro - Julia Takieddine",
    page_icon="üî¨",
    layout="wide"
)

# --- Fun√ß√µes Core ---

def extract_text_from_pdf(pdf_file):
    """Extrai texto de um arquivo PDF carregado."""
    try:
        pdf_reader = PyPDF2.PdfReader(pdf_file)
        text = ""
        for page in pdf_reader.pages:
            page_text = page.extract_text()
            if page_text:
                text += page_text
        # Limita o texto para evitar exceder limites da API
        return text[:28000]
    except Exception as e:
        st.error(f"Erro ao ler o arquivo PDF: {e}")
        return None

def analyze_with_gemini(text, api_key):
    """Envia o texto para a API do Gemini (Google AI) para an√°lise."""
    if not api_key:
        st.error("Chave de API do Google AI Studio n√£o fornecida. Por favor, insira sua chave.")
        return None

    # URL da API do Gemini. Usando um modelo flash que √© r√°pido e eficiente.
    url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key={api_key}"
    
    # O prompt detalhado instrui a IA sobre a tarefa.
    prompt = f"""
    **Tarefa:** Voc√™ √© um pesquisador especialista em psicologia e neuropsicologia com profundo conhecimento em an√°lise de ensaios cl√≠nicos. Sua miss√£o √© avaliar a qualidade metodol√≥gica do artigo cient√≠fico fornecido usando a escala PEDro.

    **Escala PEDro (Crit√©rios):**
    1.  **Crit√©rio de elegibilidade:** Os crit√©rios de elegibilidade foram especificados? (N√£o pontua)
    2.  **Aloca√ß√£o aleat√≥ria:** Os sujeitos foram alocados aleatoriamente nos grupos?
    3.  **Aloca√ß√£o sigilosa:** A aloca√ß√£o foi sigilosa?
    4.  **Semelhan√ßa na linha de base:** Os grupos eram semelhantes no in√≠cio do estudo em rela√ß√£o aos indicadores progn√≥sticos mais importantes?
    5.  **Cegamento dos sujeitos:** Houve cegamento de todos os sujeitos?
    6.  **Cegamento dos terapeutas:** Houve cegamento de todos os terapeutas que administraram a terapia?
    7.  **Cegamento dos avaliadores:** Houve cegamento de todos os avaliadores que mediram pelo menos um desfecho chave?
    8.  **Acompanhamento adequado:** As medidas de pelo menos um desfecho chave foram obtidas de mais de 85% dos sujeitos inicialmente alocados nos grupos?
    9.  **An√°lise por inten√ß√£o de tratar:** Todos os sujeitos para os quais os desfechos estavam dispon√≠veis receberam tratamento ou condi√ß√£o de controle conforme alocado, ou, quando n√£o, os dados para an√°lise foram analisados por "inten√ß√£o de tratar"?
    10. **Compara√ß√µes entre grupos:** Os resultados das compara√ß√µes estat√≠sticas entre os grupos s√£o relatados para pelo menos um desfecho chave?
    11. **Medidas de ponto e variabilidade:** O estudo fornece tanto medidas de ponto quanto medidas de variabilidade para pelo menos um desfecho chave?

    **Instru√ß√µes de An√°lise:**
    1.  Leia e analise o texto completo do artigo abaixo.
    2.  Para cada crit√©rio de 2 a 11, responda com "Sim" (1 ponto) ou "N√£o" (0 pontos). Se a informa√ß√£o n√£o estiver clara ou presente no texto, considere como "N√£o".
    3.  Para cada resposta, forne√ßa uma breve justificativa baseada em trechos do artigo, se poss√≠vel.
    4.  Some os pontos dos crit√©rios 2 a 11 para obter a pontua√ß√£o final da escala PEDro (de 0 a 10).
    5.  Com base na pontua√ß√£o, classifique a confiabilidade do estudo:
        - **0-3: Baixa confiabilidade**
        - **4-6: Moderada confiabilidade**
        - **7-10: Alta confiabilidade**
    6.  Apresente um resumo final conciso sobre a validade do estudo e sua aplicabilidade cl√≠nica e resuma em poucas frases o intuito do artigo.

    **Formato da Resposta (use Markdown em um formato que √© aceito pela interface de usu√°rio do Streamlit):**
    ```markdown
    ## An√°lise pela Escala PEDro

    **1. Crit√©rios de elegibilidade:** [Sim/N√£o] - *Justificativa...*
    **2. Aloca√ß√£o aleat√≥ria:** [Sim/N√£o] - *Justificativa...*
    ...
    **11. Medidas de ponto e variabilidade:** [Sim/N√£o] - *Justificativa...*

    ---

    ### Pontua√ß√£o Final PEDro: X/10

    ### N√≠vel de Confiabilidade: [Alta/Moderada/Baixa]

    **Resumo da An√°lise e Artigo:**
    *...*
    ```

    **Texto do Artigo para An√°lise:**
    ---
    {text}
    """
    
    # Corpo da requisi√ß√£o
    payload = {
        "contents": [{"parts": [{"text": prompt}]}]
    }
    headers = {'Content-Type': 'application/json'}

    try:
        response = requests.post(url, headers=headers, data=json.dumps(payload))
        response.raise_for_status()  # Lan√ßa um erro para respostas HTTP ruins (4xx ou 5xx)
        
        result = response.json()
        # Extrai o conte√∫do de texto da resposta da API
        return result['candidates'][0]['content']['parts'][0]['text']
        
    except requests.exceptions.HTTPError as http_err:
        st.error(f"Erro HTTP ao contatar a API do Gemini: {http_err}")
        st.error(f"Resposta da API: {response.text}")
        return None
    except Exception as e:
        st.error(f"Ocorreu um erro inesperado: {e}")
        return None

# --- Interface do Usu√°rio (Streamlit) ---

st.title("üî¨ Analisador de Artigos Cient√≠ficos (PEDro) - Julia Takieddine")
st.markdown("Fa√ßa o upload de um artigo em PDF para analis√°-lo com a **Escala PEDro** com uma vis√£o psicol√≥gica usando a IA do Google Gemini.")

# Coluna para inputs
st.sidebar.header("Configura√ß√µes")
st.sidebar.markdown("""
Para usar o app, voc√™ precisa de uma chave de API gratuita do Google AI Studio.
1. Acesse [makersuite.google.com/app/apikey](https://makersuite.google.com/app/apikey)
2. Clique em "Create API key"
3. Copie e cole a chave abaixo.
""")
api_key = st.sidebar.text_input("üîë Chave de API do Google AI Studio", type="password")
uploaded_file = st.sidebar.file_uploader("üìÑ Escolha o arquivo PDF", type="pdf")
analyze_button = st.sidebar.button("Analisar Artigo", use_container_width=True)

# √Årea de exibi√ß√£o principal
st.markdown("---")
if analyze_button and uploaded_file and api_key:
    with st.spinner("Extraindo texto do PDF..."):
        pdf_bytes = BytesIO(uploaded_file.getvalue())
        article_text = extract_text_from_pdf(pdf_bytes)

    if article_text:
        st.success("Texto extra√≠do com sucesso! ‚úÖ")
        with st.spinner("A IA do Google est√° analisando o artigo... Isso pode levar um momento."):
            analysis_result = analyze_with_gemini(article_text, api_key)
        
        if analysis_result:
            st.markdown("## Resultado da An√°lise")
            st.markdown(analysis_result, unsafe_allow_html=True)
        else:
            st.warning("A an√°lise n√£o p√¥de ser conclu√≠da. Verifique sua chave de API e o console para erros.")
elif analyze_button:
    st.warning("Por favor, fa√ßa o upload de um arquivo PDF e insira sua chave de API do Google AI Studio.")
else:
    st.info("Aguardando o upload do arquivo e a chave de API para iniciar a an√°lise.")